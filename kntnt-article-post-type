<?php

/**
 * @wordpress-plugin
 * Plugin Name:       Kntnt Article Post Type
 * Plugin URI:        https://www.kntnt.com/
 * Description:       Provides an article post type.
 * Version:           1.0.0
 * Author:            Thomas Barregren
 * Author URI:        https://www.kntnt.com/
 * License:           GPL-3.0+
 * License URI:       http://www.gnu.org/licenses/gpl-3.0.txt
 */

add_action('init', function () {

    $slug = 'article';
    $slugs = 'articles';

    register_post_type($slug, [

        // A short descriptive summary of what the post type is.
        'description' => 'An article in the online magazine.',

        // Whether the post type is hierarchical
        'hierarchical' => false,

        // Custom capabilities.
        'capability_type' => 'post',  // Alternatively your own: 'capability_type' => [$slug, $slugs],
        'map_meta_cap' => true,

        // Core feature(s) the post type supports. Core features include
        // 'title', 'editor', 'comments', 'revisions', 'trackbacks',
        // 'author', 'excerpt', 'page-attributes', 'thumbnail',
        // 'custom-fields', and 'post-formats'. Additionally, the
        // 'revisions' feature dictates whether the post type will store
        // revisions, and the 'comments' feature dictates whether the
        // comments count will show on the edit screen.
        'supports' => [
            'title',
            'excerpt',
            'thumbnail',
            'editor',
            'revisions',
            'author',
        ],

        // Whether a post type is intended for use publicly either via
        // the admin interface or by front-end users.
        'public' => true,

        // Whether queries can be performed on the front end for the post type
        // as part of parse_request().
        'publicly_queryable' => true,

        // Whether to exclude posts with this post type from front end
        // search results.
        'exclude_from_search' => false,

        // Makes this post type available for selection in navigation menus.
        'show_in_nav_menus' => false,

        // Whether to generate and allow a UI for managing this post type in the admin.
        'show_ui' => true,

        // Where to show the post type in the admin menu if 'show_ui' => true.
        'show_in_menu' => true,

        // The position in the menu order the post type should appear.
        // Use null to add it to the bottom.
        'menu_position' => 10, // Post have 5, Pages has 20.

        // The url to the icon to be used for this menu. Pass a
        // base64-encoded SVG using a data URI, which will be colored
        // to match the color scheme -- this should begin with
        // 'data:image/svg+xml;base64,'. Pass the name of a Dashicons
        // helper class to use a font icon, e.g. 'dashicons-chart-pie'.
        // See https://developer.wordpress.org/resource/dashicons.
        // Pass 'none' to leave div.wp-menu-image empty so an icon can be
        // added via CSS. Pass null to use the posts icon.
        'menu_icon' => 'dashicons-media-document',

        // Makes this post type available via the admin bar.
        'show_in_admin_bar' => true,

        // Whether to allow this post type to be exported.
        'can_export' => true,

        // Whether to delete posts of this type when deleting a user. If
        // true, posts of this type belonging to the user will be moved to
        // Trash when then user is deleted. If false, posts of this type
        // belonging to the user will *not* be trashed or deleted. If null,
        // posts are trashed if post_type_supports('author'). Otherwise
        // posts are not trashed or deleted.
        'delete_with_user' => false,

        // Whether there should be post type archives, or if a string,
        // the archive slug to use. Will generate the proper rewrite rules
        // if $rewrite is enabled.
        'has_archive' => false,

        // Sets the query_var key for this post type. If false, a post type
        // cannot be loaded at ?{query_var}={post_slug}. If specified as a
        // string, the query ?{query_var_string}={post_slug} will be valid.
        'query_var' => false,

        // Triggers the handling of rewrites for this post type.
        // Replace the array with false to prevent handling of rewrites.
        'rewrite' => [

            // Customize the permastruct slug.
            'slug' => $slug,

            // Whether the permastruct should be prepended with WP_Rewrite::$front.
            'with_front' => true,

            // Whether the feed permastruct should be built for this post type.
            'feeds' => true,

            // Whether the permastruct should provide for pagination.
            'pages' => true,

            // Endpoint mask to assign. If null and permalink_epmask is set,
            // inherits from $permalink_epmask. If null and permalink_epmask
            // is not set, defaults to EP_PERMALINK.
            'ep_mask' => null,

        ],

        //  An array of labels for this post type. If not set, post labels are
        // inherited for non-hierarchical types and page labels for
        // hierarchical ones.
        'labels' => [
            'name' => _x('Articles', 'Plural name', 'kntnt-article-custom-post-type'),
            'singular_name' => _x('Article', 'Singular name', 'kntnt-article-custom-post-type'),
            'menu_name' => _x('Articles', 'Menu name (plural)', 'kntnt-article-custom-post-type'),
            'add_new' => _x('Add New', 'Add new', 'kntnt-article-custom-post-type'),
            'add_new_item' => _x('Add New Article', 'Add new item', 'kntnt-article-custom-post-type'),
            'new_item' => _x('New Article', 'New item', 'kntnt-article-custom-post-type'),
            'edit_item' => _x('Edit Article', 'Edit item', 'kntnt-article-custom-post-type'),
            'all_items' => _x('All Articles', 'All item', 'kntnt-article-custom-post-type'),
            'view_item' => _x('View Article', 'View item', 'kntnt-article-custom-post-type'),
            'search_items' => _x('Search Articles', 'Search items', 'kntnt-article-custom-post-type'),
            'not_found' => _x('No Article found', 'No item found', 'kntnt-article-custom-post-type'),
            'not_found_in_trash' => _x('No Article found in Trash', 'No item found in Trash', 'kntnt-article-custom-post-type'),
            'parent_item_colon' => _x('Parent Article:', 'Parent item:', 'kntnt-article-custom-post-type'),
            'archives' => _x('Article Archives', 'Items Archives', 'kntnt-article-custom-post-type'),
            'attributes' => _x('Article attributes', 'Item Attributes', 'kntnt-article-custom-post-type'),
            'insert_into_item' => _x('Insert into Article', 'insert into item', 'kntnt-article-custom-post-type'),
            'uploaded_to_this_item' => _x('Uploaded to this Article', 'uploaded to this item', 'kntnt-article-custom-post-type'),
            'featured_image' => _x('Featured image', 'featured image', 'kntnt-article-custom-post-type'),
            'set_featured_image' => _x('Set featured image', 'set featured image', 'kntnt-article-custom-post-type'),
            'remove_featured_image' => _x('Remove featured image', 'Remove featured image', 'kntnt-article-custom-post-type'),
            'use_featured_image' => _x('Use as featured image', 'Use as featured image', 'kntnt-article-custom-post-type'),
            'filter_items_list' => _x('Filter Articles list', 'Filter items list', 'kntnt-article-custom-post-type'),
            'items_list_navigation' => _x('Articles list navigation', 'Items list navigation', 'kntnt-article-custom-post-type'),
            'items_list' => _x('Articles list', 'Items list', 'kntnt-article-custom-post-type'),
            'item_published' => _x('Article published', 'Item published', 'kntnt-article-custom-post-type'),
            'item_published_privately' => _x('Article published privately', 'Item published privately', 'kntnt-article-custom-post-type'),
            'item_reverted_to_draft' => _x('Article reverted to draft', 'Item reverted to draft', 'kntnt-article-custom-post-type'),
            'item_scheduled' => _x('Article scheduled', 'Item scheduled', 'kntnt-article-custom-post-type'),
            'item_updated' => _x('Article updated', 'Item updated', 'kntnt-article-custom-post-type'),
        ],

    ]);

});
